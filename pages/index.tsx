import {
  dehydrate,
  QueryClient,
  useInfiniteQuery,
} from "@tanstack/react-query";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Photo, Photos } from "pexels";
import { Fragment, useEffect } from "react";
import { useInView } from "react-intersection-observer";
import { Layout } from "../components/Layout";
import { getCurated } from "../libs/pexels";
import styles from "../styles/Home.module.css";

const PER_PAGE = 10;
const photosQueryId = "photos";

const Home: NextPage = () => {
  const { ref, inView } = useInView();

  const {
    data,
    error,
    status,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
  } = useInfiniteQuery(
    [photosQueryId],
    async ({ pageParam = 1 }) => await getCurated(pageParam, PER_PAGE),
    {
      keepPreviousData: true,
      refetchOnMount: false,
      refetchOnWindowFocus: false,
      getPreviousPageParam: (firstPage) => {
        const url = new URL(firstPage?.next_page);
        const page = Number(url.searchParams.get("page"));
        return page > 2 ? page - 2 : 1;
      },
      getNextPageParam: (lastPage) => {
        const url = new URL(lastPage?.next_page);
        const page = Number(url.searchParams.get("page"));
        return page + 1;
      },
    }
  );

  useEffect(() => {
    if (inView && Number(data?.pages?.length || 1) < 10) {
      fetchNextPage();
    }
  }, [inView]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Pexels Nextjs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <h1 className={styles.title}>Pexel + Next.js!</h1>
        {status === "loading" ? (
          <p>Loading...</p>
        ) : status === "error" ? (
          <span>Error: {error?.message}</span>
        ) : (
          <section className="grid-container">
            {data?.pages?.map((page: any) => (
              <Fragment key={page}>
                {page.photos?.map((image: Photo) => (
                  <div key={image.id}>
                    <Image
                      src={image.src.original}
                      alt={image?.alt}
                      height={250}
                      width={"100%"}
                      layout="fill"
                      loading="lazy"
                    />
                    <div className="text">
                      <p>Name: {image.photographer}</p>
                    </div>
                  </div>
                ))}
              </Fragment>
            ))}
            <button
              ref={ref}
              onClick={() => fetchNextPage()}
              disabled={!hasNextPage || isFetchingNextPage}
            >
              {isFetchingNextPage
                ? "Loading more..."
                : hasNextPage
                ? "Load Newer"
                : "Nothing more to load"}
            </button>
          </section>
        )}
      </Layout>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  let page = 1;
  const queryClient = new QueryClient();

  if (context.query.page) {
    page = parseInt(String(context.query.page));
  }

  await queryClient.prefetchQuery([photosQueryId], async () => [
    await getCurated(page, PER_PAGE),
  ]);

  return { props: { dehydratedState: dehydrate(queryClient) } };
};

export default Home;
